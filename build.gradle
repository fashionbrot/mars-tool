import java.time.LocalDateTime

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}



apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'signing'


java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    afterEvaluate {
        configure(options) {
            encoding "UTF-8"
            charSet 'UTF-8'
            author true
            version true
            failOnError false
            links "http://docs.oracle.com/javase/8/docs/api"
        }
    }
}

jar {
    into("META-INF/") {
        from rootProject.file("LICENSE")
    }
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForMavenJavaPublication }
        rename ".*", "pom.xml"
    }
    afterEvaluate {
        manifest {
            attributes 'Implementation-Title': archiveBaseName
            attributes 'Implementation-Version': archiveVersion
            attributes 'Built-Gradle': gradle.gradleVersion
            attributes 'Build-OS': System.getProperty("os.name")
            attributes 'Built-By': System.getProperty("user.name")
            attributes 'Build-Jdk': System.getProperty("java.version")
            attributes 'Build-Timestamp': LocalDateTime.now().format("yyyy-MM-dd HH:mm:ss")
        }
    }
}


repositories {
    mavenCentral()
}



publishing {
    publications {

        mavenJava(MavenPublication) {

            from components.java


            pom {



                name = 'mars-tool'
                description = 'mars-tool 工具包  https://github.com/fashionbrot/mars-tool'
                url = 'https://github.com/fashionbrot/mars-tool.git'
                packaging 'jar'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'fashionbrot'
                        name = 'fashionbrot'
                        email = "fashionbrot@163.com"
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/fashionbrot/mars-tool.git'
                    developerConnection = 'scm:git:ssh://github.com/fashionbrot/mars-tool.git'
                    url = 'https://github.com/fashionbrot/mars-tool.git'
                }

                withXml {
                    def root = asNode()
                    root.dependencies.'*'.findAll {
                        def d = it
                        d.scope.text() == 'runtime' && project.configurations.findByName("implementation").allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }.each() {
                            d.scope*.value = 'compile'
                            d.appendNode('optional', true)
                        }
                    }
                }
            }

        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"

            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username System.getProperty("oss.username")
                password System.getProperty("oss.password")
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}







dependencies {

    compileOnly   'org.projectlombok:lombok:1.18.6'
    annotationProcessor  'org.projectlombok:lombok:1.18.6'

    compileOnly 'org.slf4j:slf4j-api:1.7.12'
    compileOnly 'com.auth0:java-jwt:4.0.0'
    compileOnly 'javax.servlet:javax.servlet-api:3.1.0'
}

// 指定java版本
sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.github.fashionbrot'
version = '0.0.6'
description = 'mars-tool'


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
